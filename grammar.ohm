Program {
	file = spaces statementList spaces
	statementList = statement ("\n" spaces statement)*
    statement = stmt | functionCall
    stmt = thenCommand | onStatementMultipleLine | onStatementOneLine | callCommand | logCommand | setCommand
    onStatementOneLine = "on" spaces qString spaces statement spaces ~"end"
    onStatementMultipleLine = "on" spaces qString spaces statementList spaces "end"
    functionCall = allExpressions "(" optionalArgumentList ")"
    optionalArgumentList = argumentList?
    argumentList = allExpressions ("," spaces allExpressions)*
    qString = q string q
    alnums = alnum+
    string = (~q any)*
    q = "\"" | "'"
    identifier = alnums
    globalIdentifier = "$" alnums

    lhs = identifier | globalIdentifier
    allExpressions = infixOperatorExpression | nonOperationExpressions
    nonOperationExpressions =
    | functionCall
    | possessiveExpression
    | number
    | qString
    | lhs
    | object
    | closure
    | parenthesizedExpression

    number = ("0".."9")+

    object = "{" optionalObjectPropertiesList "}"
    optionalObjectPropertiesList = objectPropertiesList?
    objectPropertiesList = objectProperty ("," spaces objectProperty)*
    objectProperty = alnums spaces ":" spaces allExpressions

    closure = "\\" spaces optionalParameterList spaces "->" spaces allExpressions
    optionalParameterList = parameterList?
    parameterList = parameter ("," spaces parameter)*
    parameter = alnums

    parenthesizedExpression = "(" spaces allExpressions spaces ")"
    infixOperatorExpression = spaces nonOperationExpressions spaces ("+" | "*") spaces nonOperationExpressions
    // commands
    callCommand = ("call" | "get") " " functionCall
    logCommand = "log" " " allExpressions
    thenCommand = stmt spaces "then" spaces stmt
    setCommand = "set" spaces lhs spaces "to" spaces allExpressions
    possessiveExpression = allExpressions spaces "'s" spaces alnums
}
