Program {
	space := " " | "\t"

    File = StatementList ("\n" | space)*

    StatementWithPrependedNewline = "\n"* Statement

	StatementList =
    	ListOf<StatementWithPrependedNewline, &"\n">

    Statement =
    	ThenStatement

    ThenStatement =
    	| Statement "then" ThenStatement --then
        | SetStatement

	Lhs =
    	| standaloneIdentifier
        | StandalonePossessive

    SetStatement =
    	| "set" Lhs "to" Expression --set
        | LogStatement

    LogStatement =
    	| "log" Expression --log
        | CallStatement

	CallStatement =
    	| "call" StandaloneFunctionCall --call
        | OnStatementMultipleLines

	OnStatementMultipleLines =
    	| "on" standaloneString "\n" StatementList "\n" "end" --onmultiline
    	| OnStatementOneLine

	OnStatementOneLine =
    	| "on" standaloneString Statement --ononeline
        | StandaloneFunctionCall

    // expressions

    Expression =
    	FunctionCall

	StandaloneFunctionCall = Expression "(" ListOf<Expression, ","> ")"

	FunctionCall =
    	| StandaloneFunctionCall
        | BinaryOp

    // swap out left Parenthesized in the --binop line to allow chaining +'s
    BinaryOp =
    	| Parenthesized ("+" | "-" | "*" | "/") Parenthesized --binop
        | Parenthesized

    Parenthesized =
    	| "(" Expression ")" --parenthesized
        | Possessive

	StandalonePossessive = Expression "'s" standaloneIdentifier

    Possessive =
    	| StandalonePossessive
        | Object

    Object =
    	| "{" ListOf<ObjectProperty, ","> "}" --object
        | Closure

    ObjectProperty = standaloneIdentifier ":" Expression

    Closure =
    	| "\\" ListOf<standaloneIdentifier, ","> "->" Expression --closure
        | IndexInto

    IndexInto =
    	| Expression "[" Expression "]" --indexinto
        | DQString

    standaloneDQString = "\"" (~"\"" any)+ "\""

    DQString =
    	| standaloneDQString
        | QString

	standaloneQString = "'" (~"'" any)+ "'"

	QString =
    	| standaloneQString
        | TemplateString

	standaloneTemplateString = "`" (~"`" any)+ "`"

	TemplateString =
    	| standaloneTemplateString
        | Identifier

	standaloneString = standaloneDQString | standaloneQString | standaloneTemplateString

	standaloneIdentifier = (letter | "_") (alnum*)

    Identifier =
    	| "$" standaloneIdentifier --privateidentifier
    	| standaloneIdentifier
        | number

    number = ("0".."9")+
}
