Program {
	file = spaces statementList spaces
	statementList = statement ("\n" spaces statement)*
    statement = stmt | functionCall
    stmt = thenCommand | onStatementMultipleLine | onStatementOneLine | callCommand | logCommand | setCommand
    onStatementOneLine = "on" spaces qString spaces statement spaces ~"end"
    onStatementMultipleLine = "on" spaces qString spaces statementList spaces "end"
    functionCall = expression "(" optionalArgumentList ")"
    optionalArgumentList = argumentList?
    argumentList = expression ("," spaces expression)*
    qString = q string q
    alnums = alnum+
    string = (~q any)*
    q = "\"" | "'"
    identifier = alnums

    lhs = identifier
    expression = functionCall | possessiveExpression | qString | identifier | object | number | closure
    number = ("0".."9")+

    object = "{" optionalObjectPropertiesList "}"
    optionalObjectPropertiesList = objectPropertiesList?
    objectPropertiesList = objectProperty ("," spaces objectProperty)*
    objectProperty = alnums spaces ":" spaces expression

    closure = "\\" spaces optionalParameterList spaces "->" spaces expression
    optionalParameterList = parameterList?
    parameterList = parameter ("," spaces parameter)*
    parameter = alnums
    // commands
    callCommand = ("call" | "get") " " functionCall
    logCommand = "log" " " expression
    thenCommand = stmt spaces "then" spaces stmt
    setCommand = "set" spaces lhs spaces "to" spaces expression
    possessiveExpression = expression spaces "'s" spaces alnums
}
